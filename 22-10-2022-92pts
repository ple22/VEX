{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vrc import *\nfrom vexcode_vrc.events import get_Task_func\n  \n# constructors\n\ndrivetrain = Drivetrain()\nbrain = Brain()\nbottom_distance = Distance(\"BottomDistance\", 18)\nroller_optical = Optical(\"RollerOptical\", 2)\ngps = GPS(\"GPS\", 3)\nintake_motor_group = Motor(\"IntakeMotorGroup\", 10)\nbottom_line_tracker = LineTracker(\"BottomLineTracker\", 22)\nmiddle_line_tracker = LineTracker(\"MiddleLineTracker\", 23)\ntop_line_tracker = LineTracker(\"TopLineTracker\", 24)\n#endregion VEXcode Generated Robot Configuration\n\n# --------------------------------------------------\n# \n# \tProject:            Da Funny\n#\tAuthor:             Funny Phu\n#\tCreated:            \n#\tDescription:        Shoot Shoot Shoot\n#   Starting Position:  \n#   Preload:            \n# \n# --------------------------------------------------\n\n# Library imports\nfrom vexcode_vrc import *\nfrom math import sqrt\n# Function go to Coordinates:\n\n\n# Add project code in \"main\"\ndef main():\n    #Set Speed\n    intake_motor_group.set_velocity(100, PERCENT)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT) \n\n    #Pick/Shoot 3 Dish\n    goTo(-1200,1000,0)\n    drivetrain.turn_to_heading(275, DEGREES)\n    shoot(90, 140)\n\n    # Spin First Roller\n    drivetrain.turn_to_heading(0, DEGREES)\n    goTo(-1450,1100,1)\n    shoot(100, 30)\n\n    # Pick/Shoot 3 Dish\n    goTo(-1000,950,0)\n    shoot(100, 100)\n    drivetrain.drive_for(FORWARD, 25, MM)\n    drivetrain.drive_for(REVERSE, 25, MM)\n    shoot(100, 20)\n    drivetrain.turn_to_heading(277.5, DEGREES)\n    shoot(100, 140)\n\n    # Spin Second Roller\n    goTo(-900,1450,1)\n    shoot(100, 30)\n\n    # Pick/Shoot Leftover Dish\n    goTo(-1300,1500,0)\n    shoot(100, 20)\n    goTo(-450,1000,0)\n    shoot(100, 60)\n    goTo(-550,750,0)\n    shoot(100, 30)\n    drivetrain.turn_to_heading(166, DEGREES)\n    shoot(90, 140)\n    \n    goTo(-800,450,0)\n    shoot(100, 100)\n    drivetrain.drive_for(FORWARD, 25, MM)\n    drivetrain.drive_for(REVERSE, 25, MM)\n    shoot(100, 20)\n    drivetrain.turn_to_heading(157, DEGREES)\n    shoot(90, 140)\n    goTo(-800,450,0)\n\n\n\n    \n    \n\n\n    \n    \n\n\n    \n\n\n    \n    \n\n    \n\n\n    \n    \n\n\n#Define move to GPS coordinates funciton\ndef goTo(target_x, target_y, reverse):\n    # Set initial position\n    x1 = gps.x_position(MM)\n    y1 = gps.y_position(MM)\n    \n    # Identify Delta(s):\n    delta_x = target_x - x1\n    delta_y = target_y - y1\n\n    # Pythagorean theorem:\n    distance = math.sqrt(delta_x**2 + delta_y**2)\n    \n    # Identify Turn Angle:\n    if ( delta_x == 0 ):\n        if ( delta_y < 0):\n            direction = 90\n        else:\n            direction = 270\n    else:\n        direction = - math.atan(delta_y / delta_x) * 180 / math.pi\n    \n    # Identify Angle to Turn to:\n    if ( delta_x < 0 ):\n        direction = direction + 180\n    if ( reverse != 0 ):\n        direction = direction + 180\n    if ( direction > 360 ):\n        direction = direction - 360\n    \n    # Turn to Angle: \n    drivetrain.turn_to_heading(direction, DEGREES, wait=True)\n    \n    # Initiate Drive:\n    if ( reverse != 0 ):\n        drivetrain.drive_for(REVERSE, distance, MM, wait=True)\n    else:\n        drivetrain.drive_for(FORWARD, distance, MM, wait=True)\n\n#Function Shoot:\ndef shoot(power, duration):\n    intake_motor_group.set_velocity(power, PERCENT)\n    intake_motor_group.spin_for(REVERSE, duration, DEGREES)\n\n# VR threads â€” Do not delete\nvr_thread(main)\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Virtual","virtualSkillsYear":"2023"}
